#!/usr/bin/env node

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */
var PORT = process.env.PORT || 3002;
app.set('port', PORT);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Create Socket.IO server attached to HTTP server
 */
const io = require('socket.io')(server, {
  cors: {
    origin: '*', // Allow all origins (not recommended for production)
    methods: ['GET', 'POST']
    // Remove 'credentials: true' when using wildcard origin
  }
});

// Make io accessible to routes
app.locals.io = io;

// Your socket.io logic moved here from app.js
const globalUsers = new Map();

io.on("connection", (socket) => {
  socket.on("register", (name, id) => {
    socket.user = name;
    if (globalUsers.has(id)) {
      console.log("User already exist");
    } else {
      globalUsers.set(name, id);
      console.log(globalUsers);
    }
  });

  socket.on("send-message", (message, target) => {
    console.log("received a message, sending....");
    const room = globalUsers.get(target);
    socket.to(room).emit("receive-message", message);
  });

  socket.on("disconnect", () => {
    console.log(socket.user);
    globalUsers.delete(socket.user);
    const date = new Date();
    updateLastOnline(socket.user, date);
  });
});

const updateLastOnline = async (name, date) => {
  try {
    await User.updateOne({name: name}, {
      lastOnline: date
    });
    console.log(await User.findOne({name}));
  } catch (e) {
    console.log(e);
  }
};

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(PORT, '0.0.0.0');
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  console.log(`Socket.IO running on port ${PORT}`);
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
