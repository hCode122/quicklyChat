var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */
var PORT = process.env.PORT || 3002;
app.set('port', PORT);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Create Socket.IO server attached to HTTP server
 */
var io = require('socket.io')(server, {
  cors: {
    origin: '*',
  }
});

// Make io accessible to routes
app.locals.io = io;

// Your socket.io logic moved here from app.js
const globalUsers = new Map();

io.on("connection", (socket) => {
  socket.on("register", (name, id) => {
    socket.user = name;
    if (globalUsers.has(id)) {
      console.log("User already exist");
    } else {
      globalUsers.set(name, id);
      console.log(globalUsers);
    }
  });

  socket.on("send-message", (message, target) => {
    console.log("received a message, sending....");
    const room = globalUsers.get(target);
    socket.to(room).emit("receive-message", message);
  });

  socket.on("disconnect", () => {
    console.log(socket.user);
    globalUsers.delete(socket.user);
    const date = new Date();
    updateLastOnline(socket.user, date);
  });
});

const updateLastOnline = async (name, date) => {
  try {
    await User.updateOne({name: name}, {
      lastOnline: date
    });
    console.log(await User.findOne({name}));
  } catch (e) {
    console.log(e);
  }
};

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(PORT, '0.0.0.0');
server.on('error', onError);
server.on('listening', onListening);

// ... rest of your www file remains the same ...